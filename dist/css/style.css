@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

html {
  font-size: 14px; }
  @media screen and (min-width: 480px) {
    html {
      font-size: calc(14px + 2 * (100vw - 480px) / 480); } }
  @media screen and (min-width: 960px) {
    html {
      font-size: 16px; } }

body {
  font-size: 1rem;
  -webkit-font-smoothing: antialiased;
  line-height: 1.5;
  -moz-osx-font-smoothing: grayscale; }

h1 {
  font-size: 2.02729rem; }

h2 {
  font-size: 1.80203rem; }

h3 {
  font-size: 1.60181rem; }

h4 {
  font-size: 1.42383rem; }

h5 {
  font-size: 1.26562rem; }

h6 {
  font-size: 1.125rem; }

strong,
em {
  font-weight: 400; }

::-moz-selection {
  background-color: #fad9ea; }

::selection {
  background-color: #fad9ea; }

.header {
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-image: -webkit-gradient(linear, left top, right bottom, from(#1ed9d9), to(#1ebad9));
  background-image: -webkit-linear-gradient(top left, #1ed9d9, #1ebad9);
  background-image: -o-linear-gradient(top left, #1ed9d9, #1ebad9);
  background-image: linear-gradient(to bottom right, #1ed9d9, #1ebad9);
  color: #383738;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding: calc(0.625 * 1rem); }
  .header h1 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto; }
  .header svg {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 calc(3.125 * 1rem);
    flex: 0 0 calc(3.125 * 1rem);
    height: auto;
    margin-right: calc(0.625 * 1rem);
    margin-top: calc(-0.3125 * 1rem);
    max-width: 100%;
    width: calc(3.125 * 1rem); }
  .header h5 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    margin-bottom: calc(1.25 * 1rem);
    margin-top: 0;
    text-align: center;
    width: 100%; }

body {
  color: #383738;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 100vh; }

a {
  -webkit-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04);
  -o-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04);
  transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04);
  color: #46cae5; }
  a:visited {
    color: #1ebada; }
  a:hover, a:focus {
    color: #5cd1e9; }
  a:active {
    color: #89ddef; }

ul {
  border-left: 1px solid #fbdeec;
  list-style: none; }

li:before {
  color: #1ebada;
  content: 'âœ”';
  font-size: 0.88889rem;
  margin-left: -3px;
  margin-right: calc(0.625 * 1rem); }

li a {
  text-decoration: none; }

blockquote {
  background-image: -webkit-gradient(linear, left top, right bottom, from(#1ed9d9), to(#1ebad9));
  background-image: -webkit-linear-gradient(top left, #1ed9d9, #1ebad9);
  background-image: -o-linear-gradient(top left, #1ed9d9, #1ebad9);
  background-image: linear-gradient(to bottom right, #1ed9d9, #1ebad9);
  color: #383738;
  margin: 0;
  padding: calc(1.25 * 1rem) calc(2.5 * 1rem); }
  blockquote p {
    margin: 0; }

pre {
  display: block;
  max-width: 100%;
  overflow: hidden; }
  pre code {
    white-space: pre-wrap;
    word-break: break-all; }

code {
  background-image: -webkit-gradient(linear, left top, right bottom, from(#e7f8fc), to(#d0f2f9));
  background-image: -webkit-linear-gradient(top left, #e7f8fc, #d0f2f9);
  background-image: -o-linear-gradient(top left, #e7f8fc, #d0f2f9);
  background-image: linear-gradient(to bottom right, #e7f8fc, #d0f2f9);
  padding: 0 calc(0.1875 * 1rem); }
  pre code {
    display: inline-block;
    padding: calc(0.5625 * 1rem) calc(0.75 * 1rem); }

.main {
  display: grid;
  -webkit-box-flex: 1;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(60 * 1rem);
  padding-bottom: calc(1.875 * 1rem);
  padding-top: calc(1.875 * 1rem);
  width: 100%; }
  @media (min-width: 30em) {
    .main {
      grid-template-columns: 200px 1fr;
      grid-template-rows: auto; } }
  .main *:first-child {
    margin-top: 0; }

.content {
  padding: calc(0.625 * 1rem);
  width: calc(100% - calc(1.25 * 1rem)); }

.sidebar {
  padding: calc(0.625 * 1rem); }
  .sidebar ul {
    padding-left: calc(1.25 * 1rem); }
  .sidebar li {
    font-size: 1rem; }
    .sidebar li:before {
      content: 'Â»';
      font-size: 1rem;
      margin-left: -3px;
      margin-right: calc(0.625 * 1rem); }
  .sidebar .highlight:before {
    color: #d91a79; }
  .sidebar .highlight a {
    color: #d91a79; }

.banner {
  background-image: -webkit-gradient(linear, left top, right bottom, from(#ba1ada), to(#7a1ada));
  background-image: -webkit-linear-gradient(top left, #ba1ada, #7a1ada);
  background-image: -o-linear-gradient(top left, #ba1ada, #7a1ada);
  background-image: linear-gradient(to bottom right, #ba1ada, #7a1ada);
  color: #ffe;
  padding: calc(0.9375 * 1rem) calc(0.625 * 1rem);
  text-align: center; }
  .banner p {
    margin: 0; }
  .banner a {
    color: inherit; }

.sig {
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  background-image: -webkit-gradient(linear, left top, right top, from(rgba(30, 217, 217, 0.15)), to(rgba(30, 186, 218, 0.15)));
  background-image: -webkit-linear-gradient(left, rgba(30, 217, 217, 0.15), rgba(30, 186, 218, 0.15));
  background-image: -o-linear-gradient(left, rgba(30, 217, 217, 0.15), rgba(30, 186, 218, 0.15));
  background-image: linear-gradient(to right, rgba(30, 217, 217, 0.15), rgba(30, 186, 218, 0.15));
  color: #383738;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  line-height: 1;
  padding: calc(0.0625 * 1rem) calc(0.625 * 1rem) calc(0.375 * 1rem); }
  .sig p {
    font-size: 0.88889rem;
    margin: 0; }

.sig__link {
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  text-decoration: none;
  -webkit-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04);
  -o-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04);
  transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04); }

.sig__icon {
  height: calc(1.25 * 1rem);
  margin-right: calc(0.125 * 1rem);
  -webkit-transform: translateY(calc(0.25 * 1rem));
  -ms-transform: translateY(calc(0.25 * 1rem));
  transform: translateY(calc(0.25 * 1rem));
  -webkit-transform-origin: center;
  -ms-transform-origin: center;
  transform-origin: center;
  -webkit-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04) forwards;
  -o-transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04) forwards;
  transition: all 0.175s cubic-bezier(0.04, 0.88, 0.74, 1.04) forwards;
  width: calc(1.25 * 1rem); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
